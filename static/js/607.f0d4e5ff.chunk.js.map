{"version":3,"file":"static/js/607.f0d4e5ff.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","redux/contact/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { createContactThunk } from 'redux/contact/thunks';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { Box, Button, TextField } from '@mui/material';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const { contacts } = useSelector(state => state.contacts);\n  const dispatch = useDispatch();\n\n  const addContact = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    const isTrue = contacts.some(contact => name === contact.name);\n    if (isTrue) {\n      Notify.failure(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(createContactThunk({ name, number, id: nanoid() }));\n    setName('');\n    setNumber('');\n  };\n\n  const getContactData = ({ target: { name, value } }) => {\n    if (name === 'name') setName(value);\n    else setNumber(value);\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={addContact} noValidate sx={{ mt: 1 }}>\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"filled-basic\"\n        label=\"Name\"\n        variant=\"filled\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        autoComplete=\"off\"\n        value={name}\n        onChange={getContactData}\n      />\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"filled-basic\"\n        label=\"Number\"\n        variant=\"filled\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        autoComplete=\"off\"\n        onChange={getContactData}\n        value={number}\n      />\n      <Button type=\"submit\" fullWidth variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\n        Add contact\n      </Button>\n    </Box>\n  );\n};\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { deleteContactThunk, updateContactThunk } from 'redux/contact/thunks';\nimport {\n  Avatar,\n  Box,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  TextField,\n} from '@mui/material';\nimport CheckCircleOutlineTwoToneIcon from '@mui/icons-material/CheckCircleOutlineTwoTone';\nimport { useState } from 'react';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport ClearIcon from '@mui/icons-material/Clear';\n\nconst ContactListItem = ({ contacts }) => {\n  const [contactEditing, setContactEditing] = useState(null);\n  const dispatch = useDispatch();\n  return contacts.map(({ id, name, number }) => {\n    return contactEditing === id ? (\n      <ListItem\n        key={id}\n        sx={{\n          height: '72px',\n          bgcolor: '#f7faff',\n          borderRadius: '15px',\n          mb: '10px',\n        }}\n        secondaryAction={\n          <Box\n            sx={{\n              display: 'flex',\n              gap: '10px',\n            }}\n          >\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => setContactEditing(null)}\n            >\n              <ClearIcon />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => dispatch(deleteContactThunk(id))}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Box>\n        }\n      >\n        <ListItemAvatar>\n          <Avatar>{name[0]}</Avatar>\n        </ListItemAvatar>\n        <Box\n          component=\"form\"\n          onSubmit={evt => {\n            evt.preventDefault();\n            const { contactName, contactNumber } = evt.target.elements;\n            const newData = {\n              id,\n              name: contactName.value,\n              number: contactNumber.value,\n            };\n            dispatch(updateContactThunk(newData));\n            setContactEditing(null);\n          }}\n          noValidate\n          sx={{ mt: 1, display: 'flex', maxWidth: '300px', gap: '10px' }}\n        >\n          <TextField\n            name=\"contactName\"\n            defaultValue={name}\n            id=\"standard-basic\"\n            variant=\"standard\"\n          />{' '}\n          <TextField\n            name=\"contactNumber\"\n            defaultValue={number}\n            id=\"standard-basic\"\n            variant=\"standard\"\n          />\n          <IconButton aria-label=\"done\" color=\"success\" type=\"submit\">\n            <CheckCircleOutlineTwoToneIcon />\n          </IconButton>\n        </Box>\n      </ListItem>\n    ) : (\n      <ListItem\n        key={id}\n        sx={{ bgcolor: '#f7faff', borderRadius: '15px', mb: '10px' }}\n        secondaryAction={\n          <Box sx={{ display: 'flex', gap: '10px' }}>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => setContactEditing(id)}\n            >\n              <EditIcon />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => dispatch(deleteContactThunk(id))}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Box>\n        }\n      >\n        <ListItemAvatar>\n          <Avatar>{name[0]}</Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={name} secondary={number} />\n      </ListItem>\n    );\n  });\n};\n\nexport default ContactListItem;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\n\nexport const selectFilter = state => state.filter;\n\nexport const filteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  ({ contacts }, { filter }) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","import { List, Typography } from '@mui/material';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { filteredContacts } from 'redux/contact/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(filteredContacts);\n  return contacts.length > 0 ? (\n    <List>\n      <ContactListItem contacts={contacts} />\n    </List>\n  ) : (\n    <Typography component=\"p\" align=\"center\">\n      Your contact list is empty\n    </Typography>\n  );\n};\n\nexport default ContactList;\n","import { setFilter } from 'redux/filter/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, TextField } from '@mui/material';\nimport { selectContacts } from 'redux/contact/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const getFilterData = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n  return (\n    contacts.length > 0 && (\n      <Box noValidate sx={{ mt: 1 }}>\n        <TextField\n          fullWidth\n          type=\"text\"\n          name=\"filter\"\n          onChange={getFilterData}\n          label=\"Find contacts by Name\"\n          variant=\"standard\"\n        />\n      </Box>\n    )\n  );\n};\n\nexport default Filter;\n","import { Container } from '@mui/material';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllContactsThunk } from 'redux/contact/thunks';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllContactsThunk());\n  }, [dispatch]);\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"sm\"\n      sx={{\n        backgroundColor: '#fff',\n        borderRadius: '5px',\n        boxShadow: 'rgba(0, 0, 0, 0.7)',\n      }}\n    >\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["useState","name","setName","number","setNumber","contacts","useSelector","state","dispatch","useDispatch","getContactData","target","value","Box","component","onSubmit","e","stopPropagation","preventDefault","some","contact","Notify","createContactThunk","id","nanoid","noValidate","sx","mt","TextField","margin","required","fullWidth","label","variant","type","pattern","title","autoComplete","onChange","Button","mb","contactEditing","setContactEditing","map","ListItem","height","bgcolor","borderRadius","secondaryAction","display","gap","IconButton","edge","onClick","Clear","deleteContactThunk","Delete","ListItemAvatar","Avatar","evt","elements","contactName","contactNumber","newData","updateContactThunk","maxWidth","defaultValue","color","CheckCircleOutlineTwoTone","Edit","ListItemText","primary","secondary","selectContacts","filteredContacts","createSelector","filter","toLowerCase","includes","trim","length","List","Typography","align","setFilter","useEffect","getAllContactsThunk","Container","backgroundColor","boxShadow"],"sourceRoot":""}